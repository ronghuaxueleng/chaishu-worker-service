# ==================== Redis 配置 ====================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DB=0

# ==================== 数据库配置 ====================
# 数据库类型（mysql 或 sqlite）
# 如果设置了 DB_HOST 和 DB_NAME，会自动识别为 MySQL
DB_TYPE=mysql

# MySQL 配置
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=your-mysql-password
DB_NAME=chaishu
DB_CHARSET=utf8mb4

# SQLite 配置（如果使用 SQLite）
# DB_TYPE=sqlite
# DB_PATH=data/chaishu.db

# 数据库连接池配置（重要！多进程 Worker 必须配置）
# Worker 节点建议使用小连接池，避免耗尽 MySQL 最大连接数
# 例如：18 个进程 × 5 连接 = 90 个连接（MySQL 默认最大连接数通常为 151）
# 每个进程的基础连接池大小（默认 2）
DB_POOL_SIZE=2
# 每个进程的额外连接数（默认 3）
DB_POOL_MAX_OVERFLOW=3
# 总计每个进程最多: DB_POOL_SIZE + DB_POOL_MAX_OVERFLOW = 5 个连接
# 获取连接的超时时间（秒），默认 30
DB_POOL_TIMEOUT=30
# 连接回收时间（秒），默认 3600（1小时）
DB_POOL_RECYCLE=3600
# 使用前检查连接是否有效，默认 true
DB_POOL_PRE_PING=true

# ==================== Neo4j 配置 ====================
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=your-neo4j-password

# ==================== Worker 配置 ====================
# Worker 节点名称（用于标识）
KG_WORKER_NODE_NAME=worker-node-1

# 每个 Provider 启动的进程数（默认2）
KG_WORKERS_PER_PROVIDER=2

# 指定 Providers（逗号分隔，可选，留空则自动发现）
# 示例: KG_WORKER_PROVIDERS=openai,claude,zhipu
KG_WORKER_PROVIDERS=

# 按标签筛选 Providers（逗号分隔，可选，优先级高于 KG_WORKER_PROVIDERS）
# 如果设置了此选项，将只使用包含指定标签的 AI 服务商
# 示例: KG_WORKER_PROVIDERS_TAGS=deepseek,free
KG_WORKER_PROVIDERS_TAGS=

# 最大总进程数（保护机制，默认50）
KG_MAX_TOTAL_PROCESSES=50

# 单个 Provider 最大进程数（保护机制，默认10）
KG_MAX_PROCESSES_PER_PROVIDER=10

# Multiprocessing 启动方法（fork, spawn, forkserver）
# - fork: Linux 默认，速度快但 Kaggle/Jupyter 不支持
# - spawn: Windows 默认，兼容所有环境（Kaggle 必须使用）
# - 留空则使用系统默认
# MULTIPROCESSING_START_METHOD=spawn

# 日志级别（DEBUG, INFO, WARNING, ERROR）
LOG_LEVEL=INFO

# Docker 环境标记（设置为 true 可跳过某些配置加载）
DOCKER_ENV=false
